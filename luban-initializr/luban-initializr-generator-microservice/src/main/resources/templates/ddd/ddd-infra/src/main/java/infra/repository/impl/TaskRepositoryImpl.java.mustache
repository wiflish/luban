package {{packageName}}.infra.repository.impl;

import cn.hutool.core.collection.CollectionUtil;
import cn.hutool.core.lang.Assert;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.wiflish.luban.core.dto.PageResponse;
import com.wiflish.luban.core.dto.exception.InvalidParamException;
import {{packageName}}.domain.entity.Task;
import {{packageName}}.domain.repository.TaskRepository;
import {{packageName}}.dto.TaskDTO;
import {{packageName}}.dto.query.TaskQuery;
import {{packageName}}.infra.converter.TaskConverter;
import {{packageName}}.infra.mapper.TaskMapper;
import {{packageName}}.infra.po.TaskPO;
import {{packageName}}.infra.util.MybatisPlusUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.stream.Collectors;

import static {{packageName}}.constant.ErrorCode.EE_TASK_notExists;

/**
 * @author wiflish
 * @since {{currentDate}}
 */
@Repository
public class TaskRepositoryImpl implements TaskRepository {
    @Autowired
    private TaskMapper taskMapper;

    @Override
    public Long save(Task task) {
        TaskPO taskPO = TaskConverter.toTaskPO(task);
        taskMapper.insert(taskPO);

        return taskPO.getId();
    }

    @Override
    public void update(Task task) {
        Assert.notNull(task.getId(), "task.id不能为null");
        TaskPO taskPO = TaskConverter.toTaskPO(task);

        taskMapper.updateById(taskPO);
    }

    @Override
    public Task selectById(Long taskId) {
        Assert.notNull(taskId, "taskId不能为null");

        TaskPO taskPO = taskMapper.selectById(taskId);
        if (taskPO == null) {
            throw new InvalidParamException(EE_TASK_notExists.getCode(), EE_TASK_notExists.getMessage());
        }

        Task task = TaskConverter.toTask(taskPO);

        return task;
    }

    @Override
    public PageResponse<TaskDTO> selectByCriteria(TaskQuery query) {
        Page<TaskPO> page = MybatisPlusUtil.convertPage(query);

        LambdaQueryWrapper<TaskPO> taskWrapper = new LambdaQueryWrapper(TaskPO.class);
        taskWrapper.likeRight(query.getTaskName() != null, TaskPO::getName, query.getTaskName());
        taskWrapper.eq(query.getStatus() != null, TaskPO::getStatus, query.getStatus());

        Page<TaskPO> taskPOPage = taskMapper.selectPage(page, taskWrapper);
        if (taskPOPage == null || CollectionUtil.isEmpty(taskPOPage.getRecords())) {
            return PageResponse.of(query.getPageNo(), query.getPageSize());
        }
        List<TaskDTO> data = taskPOPage.getRecords().stream().map(po -> TaskConverter.toTaskDTO(po)).collect(Collectors.toList());
        PageResponse<TaskDTO> pageResponse = PageResponse.of(data, query.getPageNo(), query.getPageSize());
        if (query.getNeedTotalCount()) {
            pageResponse.setTotal(taskPOPage.getTotal());
        }
        return pageResponse;
    }
}
